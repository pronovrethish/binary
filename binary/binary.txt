#include stdio.h
#include stdlib.h

 Definition of a tree node
struct Node {
    int data;
    struct Node left;
    struct Node right;
};

 Function to create a new tree node
struct Node newNode(int data) {
    struct Node node = (struct Node)malloc(sizeof(struct Node));
    node-data = data;
    node-left = NULL;
    node-right = NULL;
    return node;
}

 Function to find the index of a given value in the inorder array
int search(int inorder[], int start, int end, int value) {
    for (int i = start; i = end; i++) {
        if (inorder[i] == value) {
            return i;
        }
    }
    return -1;
}

 Recursive function to construct the binary tree
struct Node buildTree(int inorder[], int preorder[], int inorderStart, int inorderEnd, int preorderIndex) {
    if (inorderStart  inorderEnd) {
        return NULL;
    }

     Pick current node from preorder traversal using preorderIndex and increment preorderIndex
    int currentData = preorder[preorderIndex];
    (preorderIndex)++;
    struct Node node = newNode(currentData);

     If this node has no children, return it
    if (inorderStart == inorderEnd) {
        return node;
    }

     Find the index of this node in inorder traversal
    int inorderIndex = search(inorder, inorderStart, inorderEnd, currentData);

     Recursively construct the left and right subtrees
    node-left = buildTree(inorder, preorder, inorderStart, inorderIndex - 1, preorderIndex);
    node-right = buildTree(inorder, preorder, inorderIndex + 1, inorderEnd, preorderIndex);

    return node;
}

 Function to print inorder traversal of the binary tree
void printInorder(struct Node node) {
    if (node != NULL) {
        printInorder(node-left);
        printf(%d , node-data);
        printInorder(node-right);
    }
}

 Function to print preorder traversal of the binary tree
void printPreorder(struct Node node) {
    if (node != NULL) {
        printf(%d , node-data);
        printPreorder(node-left);
        printPreorder(node-right);
    }
}

int main() {
    int inorder[] = {9, 3, 15, 20, 7};       Inorder traversal
    int preorder[] = {3, 9, 20, 15, 7};      Preorder traversal
    int length = sizeof(inorder)  sizeof(inorder[0]);
    int preorderIndex = 0;

    struct Node root = buildTree(inorder, preorder, 0, length - 1, &preorderIndex);

    printf(Inorder traversal of constructed treen);
    printInorder(root);
    printf(n);

    printf(Preorder traversal of constructed treen);
    printPreorder(root);
    printf(n);

    return 0;
}
